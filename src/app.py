"""
SunPy Telegram Bot

An AI bot made to get people notice about current weather in the world.

Bot entity is intented to recieve the type of result the user would like to get
(in this case are current weather, forecast & sticker), manage it to obtain the 
value based on current time and then bring it to the AI to output result with 
a natural lenguage result.


Languages/Technologies utilized:
- Python
- PyTelegramBotAPI
- pymeteosource
- AWS Lambda

"""
# Installed libraries
import telebot
#from openai import OpenAI
from dotenv import load_dotenv
from decouple import config
# Native python librariess
import os
import sys
# Components utilized
from components.response import generate_response
from components.calculations import Weather

# Load every key saved in the .env file
load_dotenv()

# Activating Telegram using token generated by BotFather telegram API
bot = telebot.TeleBot(config("BOT_TOKEN"), parse_mode=None)
# Initializing Weather class who tracks every information about user given location
user_location = Weather(latitude=0.0, longitude=0.0,
                        command_type="", location_obtained=False)
# client = OpenAI(api_key=os.getenv("OPEN_IA_KEY"))


@bot.message_handler(commands=["start"])
def send_welcome(message):
    """
        Introducing bot command who initialzes convesation between bot and user.

        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """ 
    # First, get chat id to send messages in the proper chat
    chat_id = message.chat.id
    # Chat messages displayed at the beginning of the conversation
    bot.send_message(chat_id, "Hey, soy SunPy 🌞")
    bot.send_message(chat_id, "Si eres nuevo por aquí, revisa mis funcionalidades" +
                      "en el menu de las tres rayitas.")


@bot.message_handler(commands=["weather"])
def instant_weather(message):
    """
        Weather command who casts current data about weather in a certain location
        
        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """
    # Type of response that user is asking
    user_location.command_type = "weather"

    # Check if location was already set up by user
    if user_location.location_obtained:
        send_response(message)
        return

    # If not obtained, ask for a location using the tool made by Telegram
    message_sent = location_message(message)
    # Wait user response who's prenteded to be only this specific message
    bot.register_next_step_handler(message_sent, obtain_location)


@bot.message_handler(commands=["forecast"])
def daily_weather(message):
    """
        Forecast command who casts an average about the average weather for the next eight hours
        
        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """
    # Type of response that user is asking
    user_location.command_type = "forecast"

    # Check if location was already set up by user
    if user_location.location_obtained:
        send_response(message)
        return

    # If not obtained, ask for a location using the tool made by Telegram
    message_sent = location_message(message)
    # Wait user response who's prenteded to be only this specific message
    bot.register_next_step_handler(message_sent, obtain_location)


@bot.message_handler(commands=["sticker"])
def sticker_like(message):
    """
        Sticker command who outputs a sticker based on the current weather for a given location
        
        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """
    # Type of response that user is asking
    user_location.command_type = "sticker"

    # Check if location was already set up by user
    if user_location.location_obtained:
        send_response(message)
        return

    # If not obtained, ask for a location using the tool made by Telegram
    message_sent = location_message(message)
    # Wait user response who's prenteded to be only this specific message
    bot.register_next_step_handler(message_sent, obtain_location)


def send_response(message) -> None:
    """
        Sending output of user request based on data provided

        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """
    # Passing necessary data to create response for user 
    answer = generate_response(user_location.latitude, user_location.longitude,
                               user_location.command_type)

    # Checking output type before sending
    if user_location.command_type == "sticker":
        # When user asks for a sticker, it's used a different command
        bot.send_sticker(message.chat.id, answer)
        return

    # After check, send it as message via chat
    bot.send_message(message.chat.id, answer)
    # Print internally success of program
    print("succeed")


@bot.message_handler(commands=["location"])
def change_location(message):
    """
        Updating location data function provided on Telegram app

        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """

    # Setting up command type
    user_location.command_type = "location"

    # Asks for a location using an specific func to obtain it
    message_sent = location_message(message)
    # Check if message provided is a location to start weather calculation
    bot.register_next_step_handler(message_sent, obtain_location)


def location_message(message):
    """
        Checking & handling location data in order to get the expected values before continuing
        
        Args: 
            message (telebot.types.Message): Keeps all information about message sent

        Returns: 
            telebot.types.Message: New message prompted by user with all its metadata
    """
    # Seding message asking for location & saving response to return it back
    message_sent = bot.send_message(message.chat.id, "Por favor, dame tu " +
                                    "ubicación usando el botón que encuentras en el menú")
    return message_sent


def obtain_location(message) -> None:
    """
        Checking & handling location data in order to get the expected values before continuing
        
        Args: 
            message (telebot.types.Message): Keeps all information about message sent
    """

    try:
        # Check if location is actually on message
        instant_location = message.location

        # If successful, print location on the terminal window
        print(instant_location.latitude, "=", type(instant_location.latitude),
              instant_location.longitude, "=", type(instant_location.longitude))

        # If is not a location, ask user to provide the value expected again
        if not isinstance(instant_location, telebot.types.Location):
            # Telling user to retrieve location again & saving new input in a variable
            message_sent = bot.send_message(message.chat.id, "Esto no es una ubicación" +
                                            " :/, mándala otra vez.")

            # Ensuring that weather object noticed that location wasn't successfully obtained
            user_location.location_obtained = False

            # Repearing process in order to check if new data is correct
            bot.register_next_step_handler(message_sent, obtain_location)
            return

    # If unexpected error occurs try again using same function
    except Exception:
        # Telling user data is not what we wanted
        bot.reply_to(message, "No tengo ni idea de qué es eso jaja, " +
                     "mándala otra vez.")
        # Ensuring that weather object noticed that location wasn't successfully obtained
        user_location.location_obtained = False
        
        # Repearing process in order to check if new data is correct
        bot.register_next_step_handler(message_sent, obtain_location)
        return

    # When message pass, use extract latitude & longitude from location message
    else:
        # Notify weather object that data is now accepted
        user_location.location_obtained = True
        
        # Get location latitud & longitude 
        user_location.latitude, user_location.longitude = instant_location.latitude, instant_location.longitude

        # When command type is location, means that other commands can proceed with its flow
        if user_location.command_type == "location":
            # In other case, it is simply updated as the new location
            return
        
        # Generating response based on given data
        answer = generate_response(user_location.latitude, user_location.longitude,
                                   user_location.command_type)

        # When user is asking fore sticker, we need a different command
        if user_location.command_type == "sticker":
            bot.send_sticker(message.chat.id, answer)
            return

        # After response is obtained, send it as an answer via telegram chat
        bot.send_message(message.chat.id, answer)
        # Print internally success of program
        print("succeed")


#When the user prompts something unexpected, just copy and paste its message
@bot.message_handler(func=lambda m: True)
def echo_all(message):
    # bot_repsonse = chat(client, message.text)

    bot.reply_to(message, message.text)  # bot_repsonse)


bot.infinity_polling()
